/*
 *   StdAtmos1976 -- Properties of the ICAO 1976 Standard Atmosphere
 *   
 *   Copyright (C) 1999-2014 by Joseph A. Huwaldt
 *   All rights reserved.
 *   
 *   This library is free software; you can redistribute it and/or
 *   modify it under the terms of the GNU Lesser General Public
 *   License as published by the Free Software Foundation; either
 *   version 2.1 of the License, or (at your option) any later version.
 *   
 *   This library is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *   Lesser General Public License for more details.
 *
 *   You should have received a copy of the GNU Lesser General Public License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *   Or visit:  http://www.gnu.org/licenses/lgpl.html
 */
package jpad.core.ex.standaloneutils.atmosphere;

import static java.lang.Math.abs;
import static java.lang.Math.exp;
import static java.lang.Math.pow;
import static java.lang.Math.sqrt;

import jpad.core.ex.standaloneutils.MathTools;

/**
*  This class provides methods for calculating the atmospheric
*  properties of the ICAO 1976 Standard Atmosphere to
*  an arbitrary altitude (above 3280839.9 ft the values are constant).
*
*  <p>  Modified by:  Joseph A. Huwaldt  </p>
*
*  @author  Joseph A. Huwaldt  Date:	September 27, 1998
*  @version April 1, 2014
*/
public final class StdAtmos1976 extends StdAtmos {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	//	Unit conversion factors.
	private static final double conv1 = 0.3048;					//	Feet to meters.
	private static final double conv2 = 2.7845242330956;		//	
	private static final double conv3 = .19403203353829e-02;	//	Slug/ft^3 to kg/m^3
	private static final double conv4 = .75006168270417e-02;	//	
	
	//	Standard gravitational acceleration m/s^2.
	private static final double gm = 9.80665;
	
	//	r0 is the polar radius of the earth in meters
	private static final double r0 = 6.356766e6;
	
	//	emor = M/R*
	private static final double emo = 28.964425;
	private static final double emor = .00348368;

	//	Ratio of specific heats of air.
	private static final double gam = 1.4;
	
	private static final double a = -76.3232;
	private static final double b = -19.9429;
	private static final double elambda = .01875;
	private static final double elk9 = 12;
	private static final double rgas = 8.31432e03;
	private static final double t10 = 3;
	private static final double t9 = 240;
	private static final double tc = 263.1905;
	private static final double tinf = 1000;
	private static final double z10 = 120;
	private static final double z8 = 91;
	private static final double z9 = 110;
	
	//	Standard sea level ISA+0°C density in slugs/ft^3.
	private static final double densr =0.23768927474626480034e-02;

	//	Standard sea level ISA+0°C pressure in psf.
	private static final double presr = 0.21162383956248054346e04;

	//	Standard sea level ISA+0°C temperature in deg. Rankine.
	private static final double tempr = 0.51866997527360945242e03;

	//	Standard sea level ISA+0°C speed of sound (ft/s).
	private static final double csr = 0.11164500056016072449e04;
	
	//	anshgh are values for very high altitudes where the atmosphere appears constant.
	private static final double[] anshgh = { 0.690948e-17, 0.156946e-09, 0.1e+04, 0.89450046e+03};
	
	//	elmtab holds the molecular scale temperature gradients, lm,b 
	private static final double[] elmtab = { -.65e-02, 0, 0.1e-02, 0.280e-02, 0, -.28e-02, -.20e-02 };
	
	//	hbtab holds the breakpoints
	private static final double[] hbtab = {   0, 11000, 20000, 32000,
						                    47000, 51000, 71000, 84852 };
	
	//	pbtab holds the pressure at the given breakpoints
	private static final double[] pbtab = { 0.10132500000000e+06, 0.22632028487292e+05, 0.54748719577096e+04,
											0.86801436292971e+03, 0.11090551466274e+03, 0.66938360412624e+02,
											0.39563784190800e+01, 0.37338000000000e+00 };
	
	//	tmbtab holds the temperatures at the breakpoints
	private static final double[] tmbtab = {   288.15, 216.65, 216.65, 228.65,
						                    270.65, 270.65, 214.65, 186.87 };

	/*
	 * QG holds the no. of meters to use for the interpolation with
	 * TT to find molecular weight, y0(1), with a call to subroutine iuni.
	 */
	private static final double[] qg = {
		0.86000000000000e+05, 0.86500000000000e+05, 0.87000000000000e+05,
		0.87500000000000e+05, 0.88000000000000e+05, 0.88500000000000e+05,
		0.89000000000000e+05, 0.89500000000000e+05, 0.90000000000000e+05,
		0.90500000000000e+05, 0.91000000000000e+05, 0.91500000000000e+05,
		0.92000000000000e+05, 0.92500000000000e+05, 0.93000000000000e+05,
		0.93500000000000e+05, 0.94000000000000e+05, 0.94500000000000e+05,
		0.95000000000000e+05, 0.95500000000000e+05, 0.96000000000000e+05,
		0.96500000000000e+05, 0.97000000000000e+05, 0.97500000000000e+05,
		0.98000000000000e+05, 0.98500000000000e+05, 0.99000000000000e+05,
		0.99500000000000e+05, 0.10000000000000e+06, 0.10100000000000e+06,
		0.10200000000000e+06, 0.10300000000000e+06, 0.10400000000000e+06,
		0.10500000000000e+06, 0.10600000000000e+06, 0.10700000000000e+06,
		0.10800000000000e+06, 0.10900000000000e+06, 0.11000000000000e+06,
		0.11100000000000e+06, 0.11200000000000e+06, 0.11300000000000e+06,
		0.11400000000000e+06, 0.11500000000000e+06, 0.11600000000000e+06,
		0.11700000000000e+06, 0.11800000000000e+06, 0.11900000000000e+06,
		0.12000000000000e+06, 0.12100000000000e+06, 0.12200000000000e+06,
		0.12300000000000e+06, 0.12400000000000e+06, 0.12500000000000e+06,
		0.12600000000000e+06, 0.12700000000000e+06, 0.12800000000000e+06,
		0.12900000000000e+06, 0.13000000000000e+06, 0.13100000000000e+06,
		0.13200000000000e+06, 0.13300000000000e+06, 0.13400000000000e+06,
		0.13500000000000e+06, 0.13600000000000e+06, 0.13700000000000e+06,
		0.13800000000000e+06, 0.13900000000000e+06, 0.14000000000000e+06,
		0.14100000000000e+06, 0.14200000000000e+06, 0.14300000000000e+06,
		0.14400000000000e+06, 0.14500000000000e+06, 0.14600000000000e+06,
		0.14700000000000e+06, 0.14800000000000e+06, 0.14900000000000e+06,
		0.15000000000000e+06, 0.15100000000000e+06, 0.15200000000000e+06,
		0.15300000000000e+06, 0.15400000000000e+06, 0.15500000000000e+06,
		0.15600000000000e+06, 0.15700000000000e+06, 0.15800000000000e+06,
		0.15900000000000e+06, 0.16000000000000e+06, 0.16100000000000e+06,
		0.16200000000000e+06, 0.16300000000000e+06, 0.16400000000000e+06,
		0.16500000000000e+06, 0.16600000000000e+06, 0.16700000000000e+06,
		0.16800000000000e+06, 0.16900000000000e+06, 0.17000000000000e+06,
		0.17100000000000e+06, 0.17200000000000e+06, 0.17300000000000e+06,
		0.17400000000000e+06, 0.17500000000000e+06, 0.17600000000000e+06,
		0.17700000000000e+06, 0.17800000000000e+06, 0.17900000000000e+06,
		0.18000000000000e+06, 0.18100000000000e+06, 0.18200000000000e+06,
		0.18300000000000e+06, 0.18400000000000e+06, 0.18500000000000e+06,
		0.18600000000000e+06, 0.18700000000000e+06, 0.18800000000000e+06,
		0.18900000000000e+06, 0.19000000000000e+06, 0.19100000000000e+06,
		0.19200000000000e+06, 0.19300000000000e+06, 0.19400000000000e+06,
		0.19500000000000e+06, 0.19600000000000e+06, 0.19700000000000e+06,
		0.19800000000000e+06, 0.19900000000000e+06, 0.20000000000000e+06,
		0.20100000000000e+06, 0.20200000000000e+06, 0.20300000000000e+06,
		0.20400000000000e+06, 0.20500000000000e+06, 0.20600000000000e+06,
		0.20700000000000e+06, 0.20800000000000e+06, 0.20900000000000e+06,
		0.21000000000000e+06, 0.21100000000000e+06, 0.21200000000000e+06,
		0.21300000000000e+06, 0.21400000000000e+06, 0.21500000000000e+06,
		0.21600000000000e+06, 0.21700000000000e+06, 0.21800000000000e+06,
		0.21900000000000e+06, 0.22000000000000e+06, 0.22100000000000e+06,
		0.22200000000000e+06, 0.22300000000000e+06, 0.22400000000000e+06,
		0.22500000000000e+06, 0.22600000000000e+06, 0.22700000000000e+06,
		0.22800000000000e+06, 0.22900000000000e+06, 0.23000000000000e+06,
		0.23100000000000e+06, 0.23200000000000e+06, 0.23300000000000e+06,
		0.23400000000000e+06, 0.23500000000000e+06, 0.23600000000000e+06,
		0.23700000000000e+06, 0.23800000000000e+06, 0.23900000000000e+06,
        0.24000000000000e+06, 0.24100000000000e+06, 0.24200000000000e+06,
		0.24300000000000e+06, 0.24400000000000e+06, 0.24500000000000e+06,
		0.24600000000000e+06, 0.24700000000000e+06, 0.24800000000000e+06,
		0.24900000000000e+06, 0.25000000000000e+06, 0.25100000000000e+06,
		0.25200000000000e+06, 0.25300000000000e+06, 0.25400000000000e+06,
		0.25500000000000e+06, 0.25600000000000e+06, 0.25700000000000e+06,
		0.25800000000000e+06, 0.25900000000000e+06, 0.26000000000000e+06,
		0.26100000000000e+06, 0.26200000000000e+06, 0.26300000000000e+06,
		0.26400000000000e+06, 0.26500000000000e+06, 0.26600000000000e+06,
		0.26700000000000e+06, 0.26800000000000e+06, 0.26900000000000e+06,
		0.27000000000000e+06, 0.27100000000000e+06, 0.27200000000000e+06,
		0.27300000000000e+06, 0.27400000000000e+06, 0.27500000000000e+06,
		0.27600000000000e+06, 0.27700000000000e+06, 0.27800000000000e+06,
		0.27900000000000e+06, 0.28000000000000e+06, 0.28100000000000e+06,
		0.28200000000000e+06, 0.28300000000000e+06, 0.28400000000000e+06,
		0.28500000000000e+06, 0.28600000000000e+06, 0.28700000000000e+06,
		0.28800000000000e+06, 0.28900000000000e+06, 0.29000000000000e+06,
		0.29100000000000e+06, 0.29200000000000e+06, 0.29300000000000e+06,
		0.29400000000000e+06, 0.29500000000000e+06, 0.29600000000000e+06,
		0.29700000000000e+06, 0.29800000000000e+06, 0.29900000000000e+06,
		0.30000000000000e+06, 0.30200000000000e+06, 0.30400000000000e+06,
		0.30600000000000e+06, 0.30800000000000e+06, 0.31000000000000e+06,
		0.31200000000000e+06, 0.31400000000000e+06, 0.31600000000000e+06,
		0.31800000000000e+06, 0.32000000000000e+06, 0.32200000000000e+06,
		0.32400000000000e+06, 0.32600000000000e+06, 0.32800000000000e+06,
		0.33000000000000e+06, 0.33200000000000e+06, 0.33400000000000e+06,
		0.33600000000000e+06, 0.33800000000000e+06, 0.34000000000000e+06,
		0.34200000000000e+06, 0.34400000000000e+06, 0.34600000000000e+06,
		0.34800000000000e+06, 0.35000000000000e+06, 0.35200000000000e+06,
		0.35400000000000e+06, 0.35600000000000e+06, 0.35800000000000e+06,
		0.36000000000000e+06, 0.36200000000000e+06, 0.36400000000000e+06,
		0.36600000000000e+06, 0.36800000000000e+06, 0.37000000000000e+06,
		0.37200000000000e+06, 0.37400000000000e+06, 0.37600000000000e+06,
		0.37800000000000e+06, 0.38000000000000e+06, 0.38200000000000e+06,
		0.38400000000000e+06, 0.38600000000000e+06, 0.38800000000000e+06,
		0.39000000000000e+06, 0.39200000000000e+06, 0.39400000000000e+06,
		0.39600000000000e+06, 0.39800000000000e+06, 0.40000000000000e+06,
		0.40200000000000e+06, 0.40400000000000e+06, 0.40600000000000e+06,
		0.40800000000000e+06, 0.41000000000000e+06, 0.41200000000000e+06,
		0.41400000000000e+06, 0.41600000000000e+06, 0.41800000000000e+06,
		0.42000000000000e+06, 0.42200000000000e+06, 0.42400000000000e+06,
		0.42600000000000e+06, 0.42800000000000e+06, 0.43000000000000e+06,
		0.43200000000000e+06, 0.43400000000000e+06, 0.43600000000000e+06,
		0.43800000000000e+06, 0.44000000000000e+06, 0.44200000000000e+06,
		0.44400000000000e+06, 0.44600000000000e+06, 0.44800000000000e+06,
		0.45000000000000e+06, 0.45200000000000e+06, 0.45400000000000e+06,
		0.45600000000000e+06, 0.45800000000000e+06, 0.46000000000000e+06,
		0.46200000000000e+06, 0.46400000000000e+06, 0.46600000000000e+06,
		0.46800000000000e+06, 0.47000000000000e+06, 0.47200000000000e+06,
		0.47400000000000e+06, 0.47600000000000e+06, 0.47800000000000e+06,
		0.48000000000000e+06, 0.48200000000000e+06, 0.48400000000000e+06,
		0.48600000000000e+06, 0.48800000000000e+06, 0.49000000000000e+06,
		0.49200000000000e+06, 0.49400000000000e+06, 0.49600000000000e+06,
		0.49800000000000e+06, 0.50000000000000e+06, 0.50500000000000e+06,
		0.51000000000000e+06, 0.51500000000000e+06, 0.52000000000000e+06,
		0.52500000000000e+06, 0.53000000000000e+06, 0.53500000000000e+06,
		0.54000000000000e+06, 0.54500000000000e+06, 0.55000000000000e+06,
		0.55500000000000e+06, 0.56000000000000e+06, 0.56500000000000e+06,
		0.57000000000000e+06, 0.57500000000000e+06, 0.58000000000000e+06,
		0.58500000000000e+06, 0.59000000000000e+06, 0.59500000000000e+06,
		0.60000000000000e+06, 0.60500000000000e+06, 0.61000000000000e+06,
		0.61500000000000e+06, 0.62000000000000e+06, 0.62500000000000e+06,
		0.63000000000000e+06, 0.63500000000000e+06, 0.64000000000000e+06,
		0.64500000000000e+06, 0.65000000000000e+06, 0.65500000000000e+06,
		0.66000000000000e+06, 0.66500000000000e+06, 0.67000000000000e+06,
		0.67500000000000e+06, 0.68000000000000e+06, 0.68500000000000e+06,
		0.69000000000000e+06, 0.69500000000000e+06, 0.70000000000000e+06,
		0.70500000000000e+06, 0.71000000000000e+06, 0.71500000000000e+06,
		0.72000000000000e+06, 0.72500000000000e+06, 0.73000000000000e+06,
		0.73500000000000e+06, 0.74000000000000e+06, 0.74500000000000e+06,
		0.75000000000000e+06, 0.75500000000000e+06, 0.76000000000000e+06,
		0.76500000000000e+06, 0.77000000000000e+06, 0.77500000000000e+06,
		0.78000000000000e+06, 0.78500000000000e+06, 0.79000000000000e+06,
		0.79500000000000e+06, 0.80000000000000e+06, 0.80500000000000e+06,
		0.81000000000000e+06, 0.81500000000000e+06, 0.82000000000000e+06,
		0.82500000000000e+06, 0.83000000000000e+06, 0.83500000000000e+06,
		0.84000000000000e+06, 0.84500000000000e+06, 0.85000000000000e+06,
		0.85500000000000e+06, 0.86000000000000e+06, 0.86500000000000e+06,
		0.87000000000000e+06, 0.87500000000000e+06, 0.88000000000000e+06,
		0.88500000000000e+06, 0.89000000000000e+06, 0.89500000000000e+06,
		0.90000000000000e+06, 0.90500000000000e+06, 0.91000000000000e+06,
		0.91500000000000e+06, 0.92000000000000e+06, 0.92500000000000e+06,
		0.93000000000000e+06, 0.93500000000000e+06, 0.94000000000000e+06,
		0.94500000000000e+06, 0.95000000000000e+06, 0.95500000000000e+06,
		0.96000000000000e+06, 0.96500000000000e+06, 0.97000000000000e+06,
		0.97500000000000e+06, 0.98000000000000e+06, 0.98500000000000e+06,
		0.99000000000000e+06, 0.99500000000000e+06, 0.10000000000000e+07
	};
	
	/*
	 * SA,SB,and SC hold the no. of km for interpolation to find
	 * the density, rho. Linear interpolation (zout) is performed
	 * by grouping the table in 4 categories,
	 *   sd (86-100) with anincrement of .5
	 *   sa (100-300) with an increment of 1,
	 *   sb (300-500) with an increment of 2, and
	 *   sc (500-1000) with an increment of 5.
	 */
	private static double[] sa = {
		0.10000000000000e+03, 0.10100000000000e+03, 0.10200000000000e+03,
		0.10300000000000e+03, 0.10400000000000e+03, 0.10500000000000e+03,
		0.10600000000000e+03, 0.10700000000000e+03, 0.10800000000000e+03,
		0.10900000000000e+03, 0.11000000000000e+03, 0.11100000000000e+03,
		0.11200000000000e+03, 0.11300000000000e+03, 0.11400000000000e+03,
		0.11500000000000e+03, 0.11600000000000e+03, 0.11700000000000e+03,
		0.11800000000000e+03, 0.11900000000000e+03, 0.12000000000000e+03,
		0.12100000000000e+03, 0.12200000000000e+03, 0.12300000000000e+03,
		0.12400000000000e+03, 0.12500000000000e+03, 0.12600000000000e+03,
		0.12700000000000e+03, 0.12800000000000e+03, 0.12900000000000e+03,
		0.13000000000000e+03, 0.13100000000000e+03, 0.13200000000000e+03,
		0.13300000000000e+03, 0.13400000000000e+03, 0.13500000000000e+03,
		0.13600000000000e+03, 0.13700000000000e+03, 0.13800000000000e+03,
		0.13900000000000e+03, 0.14000000000000e+03, 0.14100000000000e+03,
		0.14200000000000e+03, 0.14300000000000e+03, 0.14400000000000e+03,
		0.14500000000000e+03, 0.14600000000000e+03, 0.14700000000000e+03,
		0.14800000000000e+03, 0.14900000000000e+03, 0.15000000000000e+03,
		0.15100000000000e+03, 0.15200000000000e+03, 0.15300000000000e+03,
		0.15400000000000e+03, 0.15500000000000e+03, 0.15600000000000e+03,
		0.15700000000000e+03, 0.15800000000000e+03, 0.15900000000000e+03,
		0.16000000000000e+03, 0.16100000000000e+03, 0.16200000000000e+03,
		0.16300000000000e+03, 0.16400000000000e+03, 0.16500000000000e+03,
		0.16600000000000e+03, 0.16700000000000e+03, 0.16800000000000e+03,
		0.16900000000000e+03, 0.17000000000000e+03, 0.17100000000000e+03,
		0.17200000000000e+03, 0.17300000000000e+03, 0.17400000000000e+03,
		0.17500000000000e+03, 0.17600000000000e+03, 0.17700000000000e+03,
		0.17800000000000e+03, 0.17900000000000e+03, 0.18000000000000e+03,
		0.18100000000000e+03, 0.18200000000000e+03, 0.18300000000000e+03,
		0.18400000000000e+03, 0.18500000000000e+03, 0.18600000000000e+03,
		0.18700000000000e+03, 0.18800000000000e+03, 0.18900000000000e+03,
		0.19000000000000e+03, 0.19100000000000e+03, 0.19200000000000e+03,
		0.19300000000000e+03, 0.19400000000000e+03, 0.19500000000000e+03,
		0.19600000000000e+03, 0.19700000000000e+03, 0.19800000000000e+03,
		0.19900000000000e+03, 0.20000000000000e+03, 0.20100000000000e+03,
		0.20200000000000e+03, 0.20300000000000e+03, 0.20400000000000e+03,
		0.20500000000000e+03, 0.20600000000000e+03, 0.20700000000000e+03,
		0.20800000000000e+03, 0.20900000000000e+03, 0.21000000000000e+03,
		0.21100000000000e+03, 0.21200000000000e+03, 0.21300000000000e+03,
		0.21400000000000e+03, 0.21500000000000e+03, 0.21600000000000e+03,
		0.21700000000000e+03, 0.21800000000000e+03, 0.21900000000000e+03,
		0.22000000000000e+03, 0.22100000000000e+03, 0.22200000000000e+03,
		0.22300000000000e+03, 0.22400000000000e+03, 0.22500000000000e+03,
		0.22600000000000e+03, 0.22700000000000e+03, 0.22800000000000e+03,
		0.22900000000000e+03, 0.23000000000000e+03, 0.23100000000000e+03,
		0.23200000000000e+03, 0.23300000000000e+03, 0.23400000000000e+03,
		0.23500000000000e+03, 0.23600000000000e+03, 0.23700000000000e+03,
		0.23800000000000e+03, 0.23900000000000e+03, 0.24000000000000e+03,
		0.24100000000000e+03, 0.24200000000000e+03, 0.24300000000000e+03,
		0.24400000000000e+03, 0.24500000000000e+03, 0.24600000000000e+03,
		0.24700000000000e+03, 0.24800000000000e+03, 0.24900000000000e+03,
		0.25000000000000e+03, 0.25100000000000e+03, 0.25200000000000e+03,
		0.25300000000000e+03, 0.25400000000000e+03, 0.25500000000000e+03,
		0.25600000000000e+03, 0.25700000000000e+03, 0.25800000000000e+03,
		0.25900000000000e+03, 0.26000000000000e+03, 0.26100000000000e+03,
		0.26200000000000e+03, 0.26300000000000e+03, 0.26400000000000e+03,
		0.26500000000000e+03, 0.26600000000000e+03, 0.26700000000000e+03,
		0.26800000000000e+03, 0.26900000000000e+03, 0.27000000000000e+03,
		0.27100000000000e+03, 0.27200000000000e+03, 0.27300000000000e+03,
		0.27400000000000e+03, 0.27500000000000e+03, 0.27600000000000e+03,
		0.27700000000000e+03, 0.27800000000000e+03, 0.27900000000000e+03,
		0.28000000000000e+03, 0.28100000000000e+03, 0.28200000000000e+03,
		0.28300000000000e+03, 0.28400000000000e+03, 0.28500000000000e+03,
		0.28600000000000e+03, 0.28700000000000e+03, 0.28800000000000e+03,
		0.28900000000000e+03, 0.29000000000000e+03, 0.29100000000000e+03,
		0.29200000000000e+03, 0.29300000000000e+03, 0.29400000000000e+03,
		0.29500000000000e+03, 0.29600000000000e+03, 0.29700000000000e+03,
		0.29800000000000e+03, 0.29900000000000e+03, 0.30000000000000e+03
	};
	
	private static final double[] sb = {
		0.30000000000000e+03, 0.30200000000000e+03, 0.30400000000000e+03,
		0.30600000000000e+03, 0.30800000000000e+03, 0.31000000000000e+03,
		0.31200000000000e+03, 0.31400000000000e+03, 0.31600000000000e+03,
		0.31800000000000e+03, 0.32000000000000e+03, 0.32200000000000e+03,
		0.32400000000000e+03, 0.32600000000000e+03, 0.32800000000000e+03,
		0.33000000000000e+03, 0.33200000000000e+03, 0.33400000000000e+03,
		0.33600000000000e+03, 0.33800000000000e+03, 0.34000000000000e+03,
		0.34200000000000e+03, 0.34400000000000e+03, 0.34600000000000e+03,
		0.34800000000000e+03, 0.35000000000000e+03, 0.35200000000000e+03,
		0.35400000000000e+03, 0.35600000000000e+03, 0.35800000000000e+03,
		0.36000000000000e+03, 0.36200000000000e+03, 0.36400000000000e+03,
		0.36600000000000e+03, 0.36800000000000e+03, 0.37000000000000e+03,
		0.37200000000000e+03, 0.37400000000000e+03, 0.37600000000000e+03,
		0.37800000000000e+03, 0.38000000000000e+03, 0.38200000000000e+03,
		0.38400000000000e+03, 0.38600000000000e+03, 0.38800000000000e+03,
		0.39000000000000e+03, 0.39200000000000e+03, 0.39400000000000e+03,
		0.39600000000000e+03, 0.39800000000000e+03, 0.40000000000000e+03,
		0.40200000000000e+03, 0.40400000000000e+03, 0.40600000000000e+03,
		0.40800000000000e+03, 0.41000000000000e+03, 0.41200000000000e+03,
		0.41400000000000e+03, 0.41600000000000e+03, 0.41800000000000e+03,
		0.42000000000000e+03, 0.42200000000000e+03, 0.42400000000000e+03,
		0.42600000000000e+03, 0.42800000000000e+03, 0.43000000000000e+03,
		0.43200000000000e+03, 0.43400000000000e+03, 0.43600000000000e+03,
		0.43800000000000e+03, 0.44000000000000e+03, 0.44200000000000e+03,
		0.44400000000000e+03, 0.44600000000000e+03, 0.44800000000000e+03,
		0.45000000000000e+03, 0.45200000000000e+03, 0.45400000000000e+03,
		0.45600000000000e+03, 0.45800000000000e+03, 0.46000000000000e+03,
		0.46200000000000e+03, 0.46400000000000e+03, 0.46600000000000e+03,
		0.46800000000000e+03, 0.47000000000000e+03, 0.47200000000000e+03,
		0.47400000000000e+03, 0.47600000000000e+03, 0.47800000000000e+03,
		0.48000000000000e+03, 0.48200000000000e+03, 0.48400000000000e+03,
		0.48600000000000e+03, 0.48800000000000e+03, 0.49000000000000e+03,
		0.49200000000000e+03, 0.49400000000000e+03, 0.49600000000000e+03,
		0.49800000000000e+03, 0.50000000000000e+03
	};
	
	private static final double[] sc = {
		0.50000000000000e+03, 0.50500000000000e+03, 0.51000000000000e+03,
		0.51500000000000e+03, 0.52000000000000e+03, 0.52500000000000e+03,
		0.53000000000000e+03, 0.53500000000000e+03, 0.54000000000000e+03,
		0.54500000000000e+03, 0.55000000000000e+03, 0.55500000000000e+03,
		0.56000000000000e+03, 0.56500000000000e+03, 0.57000000000000e+03,
		0.57500000000000e+03, 0.58000000000000e+03, 0.58500000000000e+03,
		0.59000000000000e+03, 0.59500000000000e+03, 0.60000000000000e+03,
		0.60500000000000e+03, 0.61000000000000e+03, 0.61500000000000e+03,
		0.62000000000000e+03, 0.62500000000000e+03, 0.63000000000000e+03,
		0.63500000000000e+03, 0.64000000000000e+03, 0.64500000000000e+03,
		0.65000000000000e+03, 0.65500000000000e+03, 0.66000000000000e+03,
		0.66500000000000e+03, 0.67000000000000e+03, 0.67500000000000e+03,
		0.68000000000000e+03, 0.68500000000000e+03, 0.69000000000000e+03,
		0.69500000000000e+03, 0.70000000000000e+03, 0.70500000000000e+03,
		0.71000000000000e+03, 0.71500000000000e+03, 0.72000000000000e+03,
		0.72500000000000e+03, 0.73000000000000e+03, 0.73500000000000e+03,
		0.74000000000000e+03, 0.74500000000000e+03, 0.75000000000000e+03,
		0.75500000000000e+03, 0.76000000000000e+03, 0.76500000000000e+03,
		0.77000000000000e+03, 0.77500000000000e+03, 0.78000000000000e+03,
		0.78500000000000e+03, 0.79000000000000e+03, 0.79500000000000e+03,
		0.80000000000000e+03, 0.80500000000000e+03, 0.81000000000000e+03,
		0.81500000000000e+03, 0.82000000000000e+03, 0.82500000000000e+03,
		0.83000000000000e+03, 0.83500000000000e+03, 0.84000000000000e+03,
		0.84500000000000e+03, 0.85000000000000e+03, 0.85500000000000e+03,
		0.86000000000000e+03, 0.86500000000000e+03, 0.87000000000000e+03,
		0.87500000000000e+03, 0.88000000000000e+03, 0.88500000000000e+03,
		0.89000000000000e+03, 0.89500000000000e+03, 0.90000000000000e+03,
		0.90500000000000e+03, 0.91000000000000e+03, 0.91500000000000e+03,
		0.92000000000000e+03, 0.92500000000000e+03, 0.93000000000000e+03,
		0.93500000000000e+03, 0.94000000000000e+03, 0.94500000000000e+03,
		0.95000000000000e+03, 0.95500000000000e+03, 0.96000000000000e+03,
		0.96500000000000e+03, 0.97000000000000e+03, 0.97500000000000e+03,
		0.98000000000000e+03, 0.98500000000000e+03, 0.99000000000000e+03,
		0.99500000000000e+03, 0.10000000000000e+04
	};
	
	private static final double[] sd = {
		0.86000000000000e+02, 0.86500000000000e+02, 0.87000000000000e+02,
		0.87500000000000e+02, 0.88000000000000e+02, 0.88500000000000e+02,
		0.89000000000000e+02, 0.89500000000000e+02, 0.90000000000000e+02,
		0.90500000000000e+02, 0.91000000000000e+02, 0.91500000000000e+02,
		0.92000000000000e+02, 0.92500000000000e+02, 0.93000000000000e+02,
		0.93500000000000e+02, 0.94000000000000e+02, 0.94500000000000e+02,
		0.95000000000000e+02, 0.95500000000000e+02, 0.96000000000000e+02,
		0.96500000000000e+02, 0.97000000000000e+02, 0.97500000000000e+02,
		0.98000000000000e+02, 0.98500000000000e+02, 0.99000000000000e+02,
		0.99500000000000e+02, 0.10000000000000e+03
	};
	
	/*
	 * tt holds the values for mol. weight to be used for interpolation.
	 * They are smoothed by curves in 2 groups, the first nine and
	 * the other 420 values.  Subroutine iuni then interpolates.
	 */
	private static final double[] tt = {
		0.28955555555556e+02, 0.28950555555556e+02, 0.28945555555560e+02,
		0.28940555555556e+02, 0.28935555555556e+02, 0.28930555555556e+02,
		0.28925555555555e+02, 0.28920555555555e+02, 0.28915555555555e+02,
		0.28893553050488e+02, 0.28879986709143e+02, 0.28865379795944e+02,
		0.28849626237875e+02, 0.28832626526719e+02, 0.28814290188523e+02,
		0.28794534447388e+02, 0.28773282553483e+02, 0.28750463548487e+02,
		0.28726013546235e+02, 0.28699876911297e+02, 0.28672004022001e+02,
		0.28642354119687e+02, 0.28610894848971e+02, 0.28577601908430e+02,
		0.28542460533522e+02, 0.28505467147161e+02, 0.28466627814581e+02,
		0.28425961951416e+02, 0.28383502833207e+02, 0.28293409566644e+02,
		0.28196845118093e+02, 0.28094384647777e+02, 0.27986690908072e+02,
		0.27874492759477e+02, 0.27758606024506e+02, 0.27639909670132e+02,
		0.27519351809072e+02, 0.27397897313671e+02, 0.27276504010806e+02,
		0.27156079131456e+02, 0.27037462356604e+02, 0.26921374079127e+02,
		0.26808389704261e+02, 0.26698920670959e+02, 0.26593224578895e+02,
		0.26491414047767e+02, 0.26393489232551e+02, 0.26299352501661e+02,
		0.26208805256926e+02, 0.26121568227283e+02, 0.26037299794792e+02,
		0.25955641616376e+02, 0.25876253713124e+02, 0.25798828372891e+02,
		0.25723085603671e+02, 0.25648766150631e+02, 0.25575651380234e+02,
		0.25503544546290e+02, 0.25432282795886e+02, 0.25361754470000e+02,
		0.25291895971629e+02, 0.25222642086856e+02, 0.25153911413754e+02,
		0.25085613935487e+02, 0.25017694899348e+02, 0.24950134600060e+02,
		0.24882931535571e+02, 0.24816082629901e+02, 0.24749574073962e+02,
		0.24683409845727e+02, 0.24617596910987e+02, 0.24552127628532e+02,
		0.24486999863146e+02, 0.24422207281034e+02, 0.24357753906234e+02,
		0.24293638921569e+02, 0.24229865750168e+02, 0.24166421363802e+02,
		0.24103293378378e+02, 0.24040484483038e+02, 0.23977983747658e+02,
		0.23915775897920e+02, 0.23853861609956e+02, 0.23792261896920e+02,
		0.23730979552029e+02, 0.23669998601981e+02, 0.23609294724786e+02,
		0.23548843235407e+02, 0.23488624825600e+02, 0.23428629250325e+02,
		0.23368857112285e+02, 0.23309319825240e+02, 0.23250037751260e+02,
		0.23191036421892e+02, 0.23132340683287e+02, 0.23073966566178e+02,
		0.23015910690296e+02, 0.22958150599577e+02, 0.22900683079185e+02,
		0.22843519512455e+02, 0.22786665334146e+02, 0.22730110539548e+02,
		0.22673858242254e+02, 0.22617910250954e+02, 0.22562250195578e+02,
		0.22506864747019e+02, 0.22451735474321e+02, 0.22396855506535e+02,
		0.22342217078009e+02, 0.22287824077788e+02, 0.22233675600989e+02,
		0.22179774540972e+02, 0.22126107169919e+02, 0.22072661272100e+02,
		0.22019442380515e+02, 0.21966447657955e+02, 0.21913678485053e+02,
		0.21861151225261e+02, 0.21808865604905e+02, 0.21756811690576e+02,
		0.21704988432571e+02, 0.21653420317840e+02, 0.21602158606423e+02,
		0.21551239927115e+02, 0.21500682944912e+02, 0.21450495783726e+02,
		0.21400680530981e+02, 0.21351234752152e+02, 0.21302149996267e+02,
		0.21253407314133e+02, 0.21204969863859e+02, 0.21156786279316e+02,
		0.21108832119730e+02, 0.21061108688659e+02, 0.21013626446163e+02,
		0.20966386538024e+02, 0.20919373894222e+02, 0.20872588920753e+02,
		0.20826036791957e+02, 0.20779714890640e+02, 0.20733638907085e+02,
		0.20687826510735e+02, 0.20642279025488e+02, 0.20597001526217e+02,
		0.20551993758461e+02, 0.20507265900550e+02, 0.20462825100790e+02,
		0.20418686773528e+02, 0.20374856532729e+02, 0.20331336710654e+02,
		0.20288103359187e+02, 0.20245121306129e+02, 0.20202370416205e+02,
		0.20159856282394e+02, 0.20117578472322e+02, 0.20075537399439e+02,
		0.20033752789173e+02, 0.19992266687658e+02, 0.19951103825036e+02,
		0.19910270118157e+02, 0.19869762090163e+02, 0.19829573634235e+02,
		0.19789700140530e+02, 0.19750140030269e+02, 0.19710893732254e+02,
		0.19671960116009e+02, 0.19633330382875e+02, 0.19594979432504e+02,
		0.19556868299741e+02, 0.19518984886195e+02, 0.19481342175158e+02,
		0.19443961054430e+02, 0.19406851177044e+02, 0.19370003228426e+02,
		0.19333419556249e+02, 0.19297102124920e+02, 0.19261038328043e+02,
		0.19225225198186e+02, 0.19189664523292e+02, 0.19154382948514e+02,
		0.19119409461669e+02, 0.19084750612793e+02, 0.19050403802380e+02,
		0.19016341007069e+02, 0.18982530546028e+02, 0.18948956549689e+02,
		0.18915595825316e+02, 0.18882433351479e+02, 0.18849476032443e+02,
		0.18816724279587e+02, 0.18784182474448e+02, 0.18751867759830e+02,
		0.18719776575490e+02, 0.18687889916814e+02, 0.18656190314184e+02,
		0.18624677152136e+02, 0.18593380449237e+02, 0.18562359573034e+02,
		0.18531659624364e+02, 0.18501306140856e+02, 0.18471310737058e+02,
		0.18441673954511e+02, 0.18412385223754e+02, 0.18383419933926e+02,
		0.18354733699601e+02, 0.18326267544176e+02, 0.18297991376689e+02,
		0.18269905109297e+02, 0.18242024681911e+02, 0.18214366525612e+02,
		0.18186930356606e+02, 0.18159693702808e+02, 0.18132645196786e+02,
		0.18105775700098e+02, 0.18079067899268e+02, 0.18052524997626e+02,
		0.18026157532432e+02, 0.17999968845222e+02, 0.17973979675657e+02,
		0.17948210746387e+02, 0.17922663730406e+02, 0.17897340994698e+02,
		0.17872236519785e+02, 0.17847352036379e+02, 0.17822684358018e+02,
		0.17798237960878e+02, 0.17774008771494e+02, 0.17749993196117e+02,
		0.17726168364405e+02, 0.17679019358788e+02, 0.17632553510208e+02,
		0.17586818800928e+02, 0.17541797791199e+02, 0.17497563555603e+02,
		0.17454172159545e+02, 0.17411720483699e+02, 0.17370132750109e+02,
		0.17329212255239e+02, 0.17288746473080e+02, 0.17248569053700e+02,
		0.17208591830996e+02, 0.17168817282760e+02, 0.17129337026611e+02,
		0.17090316207352e+02, 0.17051958002399e+02, 0.17014437918066e+02,
		0.16977795409283e+02, 0.16941880707612e+02, 0.16906571065832e+02,
		0.16871723314043e+02, 0.16837303586173e+02, 0.16803269715358e+02,
		0.16769642150834e+02, 0.16736332979706e+02, 0.16703274056650e+02,
		0.16670524269678e+02, 0.16638034913470e+02, 0.16605720464601e+02,
		0.16573620960039e+02, 0.16541943578047e+02, 0.16510764182851e+02,
		0.16480027199543e+02, 0.16449622707733e+02, 0.16419435428826e+02,
		0.16389372206558e+02, 0.16359375160473e+02, 0.16329426412039e+02,
		0.16299548086327e+02, 0.16269798748782e+02, 0.16240264880639e+02,
		0.16211043686686e+02, 0.16182211812262e+02, 0.16153774003148e+02,
		0.16125587292277e+02, 0.16097369321222e+02, 0.16069016171487e+02,
		0.16040596005690e+02, 0.16012241519765e+02, 0.15984046044086e+02,
		0.15955955810278e+02, 0.15927761591295e+02, 0.15899409484906e+02,
		0.15870992473720e+02, 0.15842642541414e+02, 0.15814426576967e+02,
		0.15786238631945e+02, 0.15757793453487e+02, 0.15728944426929e+02,
		0.15699692414677e+02, 0.15670111097346e+02, 0.15640297664505e+02,
		0.15610344609280e+02, 0.15580326628218e+02, 0.15550296769105e+02,
		0.15520287023760e+02, 0.15490309918806e+02, 0.15460359012318e+02,
		0.15430407478548e+02, 0.15400405213795e+02, 0.15370276234606e+02,
		0.15339919646011e+02, 0.15309219097458e+02, 0.15278067168051e+02,
		0.15246411963729e+02, 0.15214332389756e+02, 0.15182036554366e+02,
		0.15149562010718e+02, 0.15116816157425e+02, 0.15083737732849e+02,
		0.15050367470925e+02, 0.15016614935566e+02, 0.14982369989582e+02,
		0.14947639269955e+02, 0.14912389048762e+02, 0.14876636229078e+02,
		0.14840356294810e+02, 0.14803640498120e+02, 0.14766561694207e+02,
		0.14729068643988e+02, 0.14691229490740e+02, 0.14653176524631e+02,
		0.14614964605073e+02, 0.14576444287492e+02, 0.14537255564142e+02,
		0.14497168171740e+02, 0.14456139559187e+02, 0.14414321015609e+02,
		0.14372014652221e+02, 0.14329355698312e+02, 0.14221236168718e+02,
		0.14111047668547e+02, 0.13997903995170e+02, 0.13880356366178e+02,
		0.13758134921136e+02, 0.13631398066589e+02, 0.13501267934772e+02,
		0.13368022979927e+02, 0.13231182823151e+02, 0.13091188829300e+02,
		0.12947816371880e+02, 0.12800206685894e+02, 0.12648740565693e+02,
		0.12494240702847e+02, 0.12337629499004e+02, 0.12177577428122e+02,
		0.12014049395139e+02, 0.11848363432286e+02, 0.11679787384641e+02,
		0.11508046731321e+02, 0.11333616919387e+02, 0.11157718038893e+02,
		0.10979841915695e+02, 0.10800437873414e+02, 0.10620373504758e+02,
		0.10440184189911e+02, 0.10260047901970e+02, 0.10079946999304e+02,
		0.98998093197344e+01, 0.97196226237370e+01, 0.95395761864836e+01,
		0.93602180273326e+01, 0.91824094087722e+01, 0.90065289259322e+01,
		0.88318768146146e+01, 0.86593744286718e+01, 0.84893670681517e+01,
		0.83224125777566e+01, 0.81591945858343e+01, 0.79990097168133e+01,
		0.78414585080434e+01, 0.76867002258591e+01, 0.75346333586743e+01,
		0.73863568086450e+01, 0.72410118434043e+01, 0.70992475993262e+01,
		0.69617720270027e+01, 0.68293312032928e+01, 0.67017140617600e+01,
		0.65785725743320e+01, 0.64587547430150e+01, 0.63419937594030e+01,
		0.62287684585694e+01, 0.61186290209594e+01, 0.60118524703926e+01,
		0.59095371910204e+01, 0.58118397627369e+01, 0.57186058203282e+01,
		0.56287516982295e+01, 0.55420357427436e+01, 0.54589512944515e+01,
		0.53790043085166e+01, 0.53022335820767e+01, 0.52291504768221e+01,
		0.51590690005337e+01, 0.50916570934214e+01, 0.50270752813959e+01,
		0.49650157878121e+01, 0.49060197281270e+01, 0.48484057995904e+01,
		0.47926038696272e+01, 0.47403533246579e+01, 0.46918439573137e+01,
		0.46462756139547e+01, 0.46021717341711e+01, 0.45598937064872e+01,
		0.45189826958074e+01, 0.44788566954410e+01, 0.44398320484858e+01,
		0.44031977064123e+01, 0.43700090997512e+01, 0.43391881139848e+01,
		0.43092475208453e+01, 0.42793741605095e+01, 0.42495060815497e+01,
		0.42202146676365e+01, 0.41924744415516e+01, 0.41667803852229e+01,
		0.41424632808956e+01, 0.41201951041659e+01, 0.40994944753804e+01,
		0.40794175364665e+01, 0.40594273876703e+01, 0.40395627401886e+01,
		0.40204213946023e+01, 0.40029221055957e+01, 0.39872792416685e+01,
		0.39721213558512e+01, 0.39570633070183e+01, 0.39412423085149e+01
	};
	
	/*
	 * vaa,vbb,and vc hold the natural logs  of the densities in 4
	 * groups for linear interpolation (zout):
	 * 		vd(86-100),vaa(100-300),vbb(300-500),and vc(500-1000).
	 */
	private static final double[] vaa = {
		-.14394620000000e+02, -.14571600000000e+02, -.14748180000000e+02,
		-.14924170000000e+02, -.15099610000000e+02, -.15274380000000e+02,
		-.15448220000000e+02, -.15621570000000e+02, -.15795290000000e+02,
		-.15968810000000e+02, -.16147730000000e+02, -.16327460000000e+02,
		-.16498190000000e+02, -.16660930000000e+02, -.16816260000000e+02,
		-.16964630000000e+02, -.17106960000000e+02, -.17243260000000e+02,
		-.17374410000000e+02, -.17500800000000e+02, -.17622270000000e+02,
		-.17739100000000e+02, -.17851400000000e+02, -.17960100000000e+02,
		-.18064410000000e+02, -.18165260000000e+02, -.18262820000000e+02,
		-.18357710000000e+02, -.18449390000000e+02, -.18538450000000e+02,
		-.18625000000000e+02, -.18709160000000e+02, -.18791160000000e+02,
		-.18871040000000e+02, -.18948820000000e+02, -.19024900000000e+02,
		-.19099140000000e+02, -.19171670000000e+02, -.19242570000000e+02,
		-.19312030000000e+02, -.19380140000000e+02, -.19446790000000e+02,
		-.19511920000000e+02, -.19575860000000e+02, -.19638750000000e+02,
		-.19700460000000e+02, -.19760860000000e+02, -.19820670000000e+02,
		-.19879120000000e+02, -.19936630000000e+02, -.19992820000000e+02,
		-.20048790000000e+02, -.20103230000000e+02, -.20157380000000e+02,
		-.20210440000000e+02, -.20262680000000e+02, -.20314470000000e+02,
		-.20364890000000e+02, -.20415050000000e+02, -.20464760000000e+02,
		-.20513820000000e+02, -.20562000000000e+02, -.20609040000000e+02,
		-.20656540000000e+02, -.20702480000000e+02, -.20748580000000e+02,
		-.20793800000000e+02, -.20838560000000e+02, -.20882850000000e+02,
		-.20926480000000e+02, -.20969810000000e+02, -.21012550000000e+02,
		-.21054830000000e+02, -.21096800000000e+02, -.21138180000000e+02,
		-.21179130000000e+02, -.21219860000000e+02, -.21260090000000e+02,
		-.21299880000000e+02, -.21339270000000e+02, -.21378350000000e+02,
		-.21417010000000e+02, -.21455360000000e+02, -.21493290000000e+02,
		-.21530930000000e+02, -.21568400000000e+02, -.21605400000000e+02,
		-.21642060000000e+02, -.21678560000000e+02, -.21714550000000e+02,
		-.21750210000000e+02, -.21785740000000e+02, -.21821080000000e+02,
		-.21855850000000e+02, -.21890590000000e+02, -.21925240000000e+02,
		-.21959420000000e+02, -.21993020000000e+02, -.22026690000000e+02,
		-.22060390000000e+02, -.22093290000000e+02, -.22126500000000e+02,
		-.22159170000000e+02, -.22191640000000e+02, -.22223850000000e+02,
		-.22255740000000e+02, -.22287730000000e+02, -.22319290000000e+02,
		-.22350870000000e+02, -.22381890000000e+02, -.22412830000000e+02,
		-.22443640000000e+02, -.22474270000000e+02, -.22505270000000e+02,
		-.22535430000000e+02, -.22565270000000e+02, -.22595370000000e+02,
		-.22625060000000e+02, -.22654290000000e+02, -.22683680000000e+02,
		-.22713230000000e+02, -.22742180000000e+02, -.22771210000000e+02,
		-.22800310000000e+02, -.22828640000000e+02, -.22856950000000e+02,
		-.22885220000000e+02, -.22913420000000e+02, -.22941510000000e+02,
		-.22969470000000e+02, -.22997260000000e+02, -.23024850000000e+02,
		-.23052090000000e+02, -.23079360000000e+02, -.23106520000000e+02,
		-.23133550000000e+02, -.23160530000000e+02, -.23187310000000e+02,
		-.23213990000000e+02, -.23240530000000e+02, -.23266900000000e+02,
		-.23293210000000e+02, -.23319420000000e+02, -.23345370000000e+02,
		-.23371300000000e+02, -.23397200000000e+02, -.23422900000000e+02,
		-.23448510000000e+02, -.23474010000000e+02, -.23499380000000e+02,
		-.23524580000000e+02, -.23549760000000e+02, -.23574900000000e+02,
		-.23599790000000e+02, -.23624780000000e+02, -.23649470000000e+02,
		-.23674220000000e+02, -.23698800000000e+02, -.23723210000000e+02,
		-.23747600000000e+02, -.23771980000000e+02, -.23796100000000e+02,
		-.23820150000000e+02, -.23844110000000e+02, -.23868190000000e+02,
		-.23891920000000e+02, -.23915740000000e+02, -.23939400000000e+02,
		-.23962850000000e+02, -.23986350000000e+02, -.24009890000000e+02,
		-.24033160000000e+02, -.24056430000000e+02, -.24079680000000e+02,
		-.24102600000000e+02, -.24125760000000e+02, -.24148550000000e+02,
		-.24171550000000e+02, -.24194460000000e+02, -.24216910000000e+02,
		-.24239540000000e+02, -.24262350000000e+02, -.24284630000000e+02,
		-.24307060000000e+02, -.24329640000000e+02, -.24351610000000e+02,
		-.24374080000000e+02, -.24396270000000e+02, -.24418160000000e+02,
		-.24440130000000e+02, -.24462180000000e+02, -.24484290000000e+02,
		-.24506020000000e+02, -.24527780000000e+02, -.24549570000000e+02,
		-.24570910000000e+02, -.24592710000000e+02, -.24614020000000e+02,
		-.24635790000000e+02, -.24657030000000e+02, -.24678200000000e+02
	};
	
	private static final double[] vbb = {
		-.24678200000000e+02, -.24720850000000e+02, -.24763120000000e+02,
		-.24804890000000e+02, -.24847250000000e+02, -.24888890000000e+02,
		-.24930330000000e+02, -.24971460000000e+02, -.25012170000000e+02,
		-.25053080000000e+02, -.25094150000000e+02, -.25134520000000e+02,
		-.25174860000000e+02, -.25214210000000e+02, -.25254260000000e+02,
		-.25294030000000e+02, -.25333850000000e+02, -.25373330000000e+02,
		-.25412580000000e+02, -.25451620000000e+02, -.25490600000000e+02,
		-.25529450000000e+02, -.25568090000000e+02, -.25606560000000e+02,
		-.25644930000000e+02, -.25683110000000e+02, -.25721330000000e+02,
		-.25759220000000e+02, -.25797000000000e+02, -.25834770000000e+02,
		-.25872300000000e+02, -.25909680000000e+02, -.25947030000000e+02,
		-.25984290000000e+02, -.26021380000000e+02, -.26058250000000e+02,
		-.26095230000000e+02, -.26131840000000e+02, -.26168690000000e+02,
		-.26205030000000e+02, -.26241480000000e+02, -.26277770000000e+02,
		-.26314080000000e+02, -.26350370000000e+02, -.26386290000000e+02,
		-.26422060000000e+02, -.26457920000000e+02, -.26493830000000e+02,
		-.26529410000000e+02, -.26564930000000e+02, -.26600330000000e+02,
		-.26635920000000e+02, -.26671290000000e+02, -.26706370000000e+02,
		-.26741490000000e+02, -.26776610000000e+02, -.26811680000000e+02,
		-.26846210000000e+02, -.26881020000000e+02, -.26916110000000e+02,
		-.26950450000000e+02, -.26984970000000e+02, -.27019630000000e+02,
		-.27053850000000e+02, -.27088700000000e+02, -.27123000000000e+02,
		-.27157270000000e+02, -.27190830000000e+02, -.27224890000000e+02,
		-.27259460000000e+02, -.27293120000000e+02, -.27327220000000e+02,
		-.27360990000000e+02, -.27394370000000e+02, -.27428080000000e+02,
		-.27462120000000e+02, -.27495620000000e+02, -.27528460000000e+02,
		-.27562430000000e+02, -.27595650000000e+02, -.27629020000000e+02,
		-.27662100000000e+02, -.27695350000000e+02, -.27728410000000e+02,
		-.27761470000000e+02, -.27794480000000e+02, -.27827400000000e+02,
		-.27860180000000e+02, -.27893040000000e+02, -.27925790000000e+02,
		-.27958410000000e+02, -.27991130000000e+02, -.28023620000000e+02,
		-.28056130000000e+02, -.28088620000000e+02, -.28120900000000e+02,
		-.28153240000000e+02, -.28185620000000e+02, -.28217830000000e+02,
		-.28249990000000e+02, -.28282070000000e+02
	};
	
	private static final double[] vc = {
		-.28282070000000e+02, -.28362080000000e+02, -.28441600000000e+02,
		-.28520910000000e+02, -.28599660000000e+02, -.28678280000000e+02,
		-.28756180000000e+02, -.28833990000000e+02, -.28911160000000e+02,
		-.28988150000000e+02, -.29064830000000e+02, -.29140610000000e+02,
		-.29216250000000e+02, -.29291750000000e+02, -.29366590000000e+02,
		-.29440740000000e+02, -.29514900000000e+02, -.29587890000000e+02,
		-.29661290000000e+02, -.29733940000000e+02, -.29805210000000e+02,
		-.29877230000000e+02, -.29947810000000e+02, -.30018080000000e+02,
		-.30087810000000e+02, -.30157000000000e+02, -.30225560000000e+02,
		-.30293570000000e+02, -.30360860000000e+02, -.30427570000000e+02,
		-.30493620000000e+02, -.30559090000000e+02, -.30623760000000e+02,
		-.30687780000000e+02, -.30750960000000e+02, -.30813570000000e+02,
		-.30875210000000e+02, -.30936270000000e+02, -.30996660000000e+02,
		-.31056000000000e+02, -.31114510000000e+02, -.31172520000000e+02,
		-.31229690000000e+02, -.31285690000000e+02, -.31340920000000e+02,
		-.31395490000000e+02, -.31449100000000e+02, -.31501900000000e+02,
		-.31553600000000e+02, -.31604920000000e+02, -.31655090000000e+02,
		-.31704390000000e+02, -.31752530000000e+02, -.31799870000000e+02,
		-.31846860000000e+02, -.31892600000000e+02, -.31937570000000e+02,
		-.31981550000000e+02, -.32025120000000e+02, -.32067290000000e+02,
		-.32108680000000e+02, -.32149100000000e+02, -.32189310000000e+02,
		-.32228220000000e+02, -.32266960000000e+02, -.32304580000000e+02,
		-.32341440000000e+02, -.32377520000000e+02, -.32412930000000e+02,
		-.32447650000000e+02, -.32481580000000e+02, -.32514980000000e+02,
		-.32547620000000e+02, -.32579670000000e+02, -.32611180000000e+02,
		-.32642060000000e+02, -.32672370000000e+02, -.32702040000000e+02,
		-.32731140000000e+02, -.32759760000000e+02, -.32788010000000e+02,
		-.32815650000000e+02, -.32842790000000e+02, -.32869560000000e+02,
		-.32895900000000e+02, -.32921770000000e+02, -.32947100000000e+02,
		-.32972250000000e+02, -.32996980000000e+02, -.33021230000000e+02,
		-.33045200000000e+02, -.33068830000000e+02, -.33092330000000e+02,
		-.33115190000000e+02, -.33138090000000e+02, -.33160510000000e+02,
		-.33182680000000e+02, -.33204570000000e+02, -.33226130000000e+02,
		-.33247620000000e+02, -.33268730000000e+02
	};
	
	private static final double[] vd = {
		-.11875620000000e+02, -.11964540000000e+02, -.12053520000000e+02,
		-.12142540000000e+02, -.12231390000000e+02, -.12320360000000e+02,
		-.12409170000000e+02, -.12498030000000e+02, -.12587040000000e+02,
		-.12675760000000e+02, -.12764690000000e+02, -.12853860000000e+02,
		-.12942960000000e+02, -.13032520000000e+02, -.13122360000000e+02,
		-.13212290000000e+02, -.13302690000000e+02, -.13392860000000e+02,
		-.13484050000000e+02, -.13574130000000e+02, -.13665370000000e+02,
		-.13756300000000e+02, -.13847520000000e+02, -.13938580000000e+02,
		-.14029820000000e+02, -.14121090000000e+02, -.14212260000000e+02,
		-.14303430000000e+02, -.14394620000000e+02
	};
	
	/*
	 * smo holds the ratio of m to m0 from which the molecular
	 * weight for altitudes below 86000 meters can be found.
	 */
	private static final double[] smo = {
		0.999996e0,0.999989e0,0.999971e0,0.999941e0,
		0.999909e0,0.999870e0,0.999829e0,0.999786e0,
		0.999741e0,0.999694e0,0.999641e0,0.999579e0
	};
		
	//-----------------------------------------------------------------------------------
	/**
	*  Constructor that assumes an altitude of 0 meters,
	*/
	public StdAtmos1976() { }

	/**
	*  Constructor that takes a value of altitude in meters.
	*  If the specified altitude is outside the range 0 to 86,000
	*  meters, an IllegalArgumentException exception is thrown.  </p>
	*
	*  @param  altitude Altitude at which standard atmosphere is to be
	*          calculated; value given in meters.
	*/
	public StdAtmos1976( double altitude ) throws IllegalArgumentException {

		//	Set the altitude (if out of range, throw exception).
		if ( altitude < minAltitude() )
			throw new IllegalArgumentException( "Altitude can not be less than " + (minAltitude()/1000) + " km." );
		
		else {
			if ( altitude > maxAltitude() )
				throw new IllegalArgumentException( "Altitude can not be greater than " + (maxAltitude()/1000) + " km." );
			
			else {
				//	Reset the altitude only if it has changed.

				if ( abs(altitude - alt) > MathTools.epsilon(altitude) ) {
					alt = altitude;
					
					//	Go off and calculate the standard atmosphere parameters.
					calculate( 0.0 );
				}
			}
		}
	}

	/**
	*  Constructor that takes a value of altitude in meters.
	*  If the specified altitude is outside the range 0 to 86,000
	*  meters, an IllegalArgumentException exception is thrown.  </p>
	*
	*  @param  altitude Altitude at which standard atmosphere is to be
	*          calculated; value given in meters.
	*/
	public StdAtmos1976( double altitude , double deltaTemperature ) throws IllegalArgumentException {

		//	Set the altitude (if out of range, throw exception).
		if ( altitude < minAltitude() )
			throw new IllegalArgumentException( "Altitude can not be less than " + (minAltitude()/1000) + " km." );
		
		else {
			if ( altitude > maxAltitude() )
				throw new IllegalArgumentException( "Altitude can not be greater than " + (maxAltitude()/1000) + " km." );
			
			else {
				//	Reset the altitude only if it has changed.

				if ( abs(altitude - alt) > MathTools.epsilon(altitude) ) {
					alt = altitude;
					
					//	Go off and calculate the standard atmosphere parameters.
					calculate(deltaTemperature);
				}
			}
		}
	}
	
	//-----------------------------------------------------------------------------------
	/**
	*  Returns the standard sea level temperature for this
	*  atmosphere model in Kelvin.
	*
	*  @return Returns the standard sea level temperature in K.
	*/
    @Override
	public final double T0() {
		return tempr/1.8;	//	Convert Rankine to Kelvin
	}

	/**
	*  Returns the standard sea level pressure for this
	*  atmosphere model in Newtons/m^2.
	*
	*  @return Returns the standard sea level pressure in N/m^2.
	*/
    @Override
	public final double P0() {
		return presr/(conv2*conv4);	//	Convert from lbf/ft^2 to N/m^2.
	}

	/**
	*  Returns the standard sea level density for this
	*  atmosphere model in kg/L (g/cm^3).
	*
	*  @return Returns the standard sea level density in kg/L
	*          (g/cm^3).
	*/
    @Override
	public final double RHO0() {
		return densr/(conv3*1000);	//	Convert slugs/ft^3 to g/cm^3.
	}

	/**
	*  Returns the standard sea level speed of sound for this
	*  atmosphere model.  Value returned in meters/sec.
	*
	*  @return Returns the standard sea level speed of sound in m/s.
	*/
    @Override
	public final double a0() {
		return csr*conv1;
	}

	/**
	*  Returns the minimum altitude supported by this
	*  atmosphere model in meters.
	*
	*  @return Returns the minimum altitude supported by this
	*          atmosphere model in meters.
	*/
    @Override
	public double minAltitude() {
		return 0;
	}

	/**
	*  Returns the maximum altitude supported by this
	*  atmosphere model in meters.
	*
	*  @return Returns the maximum altitude supported by this
	*          atmosphere model in meters.
	*/
    @Override
	public double maxAltitude() {
		return Double.POSITIVE_INFINITY;
	}

	/**
	*  Sets the geometric altitude where the standard atmosphere
	*  is to be calculated.
	*
	*  @param  altitude Geometric altitude at which standard atmosphere is to be
	*          calculated;  value given in meters.
	*/
    @Override
	public void setAltitude( double altitude ) throws IllegalArgumentException {
		//	Set the altitude (if out of range, throw exception).
		if ( altitude < minAltitude() )
			throw new IllegalArgumentException( "Altitude can not be less than " + (minAltitude()/1000) + " km." );
		
		else {
			if ( altitude > maxAltitude() )
				throw new IllegalArgumentException( "Altitude can not be greater than " + (maxAltitude()/1000) + " km." );
			
			else {
				//	Reset the altitude only if it has changed.

				if ( abs(altitude - alt) > MathTools.epsilon(altitude) ) {
					alt = altitude;
					
					//	Go off and calculate the standard atmosphere parameters.
					calculate( 0.0 );
				}
			}
		}
	}

	/**
	*  Sets the delta ISA for the standard atmosphere
	*  is to be calculated.
	*
	*  @param  altitude Geometric altitude at which standard atmosphere is to be
	*          calculated;  value given in meters.
	*/
    @Override
    public void setDeltaTemperature( double deltaTemperature ) throws IllegalArgumentException {
    	//	Set the altitude (if out of range, throw exception).
    	if ( deltaTemperature < -40.0 )
    		throw new IllegalArgumentException( "Delta Temperature can not be less than " + -40 + " °C" );
    	else if ( deltaTemperature > 40.0 )
    		throw new IllegalArgumentException( "Delta Temperature can not be greater than " + 40 + " °C" );
    	else {
    		//	Reset the delta Temperature only if it has changed.
    		calculate( deltaTemperature );
    	}
    }
    
	/**
	*  Sets altitude and delta ISA for the standard atmosphere
	*  is to be calculated.
	*
	*  @param  altitude Geometric altitude at which standard atmosphere is to be calculated;  value given in meters.
	*  @param  deltaTemperature at which standard atmosphere is to be calculated;  value given in °C.
	*          
	*/
    @Override
    public void setAltitudeAndDeltaTemperature( double altitude, double deltaTemperature ) throws IllegalArgumentException {

    	// 	Set the altitude (if out of range, throw exception).
    	if ( altitude < minAltitude() )
    		throw new IllegalArgumentException( "Altitude can not be less than " + (minAltitude()/1000) + " km." );
    	else if ( altitude > maxAltitude() )
    		throw new IllegalArgumentException( "Altitude can not be greater than " + (maxAltitude()/1000) + " km." );
    	else {
			//	Reset the altitude only if it has changed.
			if ( abs(altitude - alt) > MathTools.epsilon(altitude) ) 
				alt = altitude;
			} 
    	if ( deltaTemperature < -40.0 )
    		throw new IllegalArgumentException( "Delta Temperature can not be less than " + -40 + " °C" );
    	else if ( deltaTemperature > 40.0 )
    		throw new IllegalArgumentException( "Delta Temperature can not be greater than " + 40 + " °C" );
    	
    	calculate( deltaTemperature );
    }

    
	/**
	 * Calculates the properties of the 1976 IACO Standard Atmosphere with ISA deviation effects (-40°C, +40°C).
	 *  
	 * Source:  Fortran atmos76 routine created by Computer Sciences Corporation, April 1, 1984.
	 * 			Ported to Java by Joseph A. Huwaldt, January 14, 2012.
	 */
	private void calculate(double deltaTemperature) {
		double zft = alt/conv1;		//	Convert input altitude from meters to feet.
		
		/* This updates the reference values at ISA+0°C taking into account for the deltaTemperature parameter (in °C) */
		double temprMod = 1.8*deltaTemperature + 518.67;
		double presrMod = presr;
		double densrMod = 0.0000000292*Math.pow(deltaTemperature, 2) - 0.0000083583*deltaTemperature + 0.0023770779;
		double csrMod = -0.0016896125*Math.pow(deltaTemperature, 2) + 1.9404119118*deltaTemperature + 1116.4517910217;
		
		if (zft >= 3280839.9) {
			//	For z greater than 3280839.9 ft, define output values equal to those at that altitude.
			theta = anshgh[2]*1.8/temprMod;
			delta = anshgh[1]/presrMod;
			sigma = anshgh[0]/densrMod;
			cs = anshgh[3]/csrMod;
			return;
		}
		
		double z = alt;			//	z is altitude in meters.
		
		// If z less than 86000 m, compute h, the geopotential altitude,
		// and em, the molecular weight from table smo.
		double p=0, rho, t=0;
		if (z <= 86000) {
			double hh = (r0*z)/(r0+z);
			
			int index = (int)((z-80000.)/500.);
			double em, smoi;
			if (index <= 0) {
				em = 28.964425;
				smoi = 1;
			} else {
				em = smo[index-1]*emo;
				smoi = smo[index-1];
			}
			
			//	Find h in hbtab.
			boolean found = false;
			double tm=0;
			for (int n=1; n < 7; ++n) {
				double hdif = hh - hbtab[n];
				
				if (hdif < 0) {
					// h interval has been found, compute hb, pb, elm, tmb, tm, & p.
					int j = n-1;
					double hb = hbtab[j];
					double elm = elmtab[j];
					double tmb = tmbtab[j];
					tm = tmb + elm*(hh-hb);
					double aq=hh-hbtab[j];
					
					if (elm != 0) {
						// If elm not equal to zero, compute p
						double tgo = gm;
						double ts = tgo*emor;
						double q = ts/elmtab[j];
						double f = elmtab[j]*aq;
						double den = tmbtab[j] + f;
						double u = tmbtab[j]/den;
						double vv = pow(u,q);
						p = pbtab[j]*vv;
						
					} else {
						//	If elm equal to zero, compute p
						double bq = -gm*emor*aq;
						double c = bq/tmbtab[j];
						double d = exp(c);
						double e = pbtab[j]*d;
						p = e;
					}
					
					found = true;
					break;
					
				} else if (hdif == 0) {
					/*
					 * for h exactly on a tabulated value find the molecular scale
					 * temperature by using table in tmbtab. Find the pressure by
					 * using table in pbtab.
					 */
					p = pbtab[n];
					tm = tmbtab[n];
					
					found = true;
					break;
				}
			}	//	next n
			
			if (!found) {
				int j = 7;
				double hb=hbtab[j];
				double elm=elmtab[j-1];
				tm=tmbtab[j] + elm*(hh-hb);
				p=pbtab[j];
			}
			
			//	Line 20 in Fortran code
			if ( (z >= 80000) &&  (z <= 86000) ) {
				tm = tm*smoi;
				rho = ((p*em)/(rgas*tm))*smoi;
			} else
				rho = (p*em)/(rgas*tm);
			
			cs = sqrt((gam*tm*rgas)/emo);
			t  = tm;
			
		} else {
			//	For z greater than 86000 meters, compute m and p.
			// Find temperature in 4 categories.
			double z1=z/1000;
			if (z1 >= 86 && z1 < 91)  t=186.8673;
			else if (z1 >= 91 && z1 < 110)  t=tc+a*sqrt(1-pow((z1-z8)/b,2));
			else if (z1 >= 110 && z1 < 120) t=t9+elk9*(z1-z9);
			double r0km=r0/1000;
			double c=((z1-z10)*(r0km+z10))/(r0km+z1);
			
			// Find density, rho, by placing z1 in one of 3 categories and using linear interpolation.
			if ( z1 >= 120 ) t = tinf - (tinf-t10)*exp(-elambda*c);
			if ( z1 < 100 ) {
				int i = (int)((z1-86.)/.5 + 1.) - 1;
				double zout = vd[i] + (vd[i+1]-vd[i])/(sd[i+1]-sd[i])*(z1-sd[i]);
				rho = exp(zout);
				
			} else if (z1 < 300) {
				int i = (int)((z1-100.) + 1.) - 1;
				double zout = vaa[i] + (vaa[i+1]-vaa[i])/(sa[i+1]-sa[i])*(z1-sa[i]);
				rho = exp(zout);
				
			} else if (z1 < 500) {
				int i = (int)((z1-300)/2. + 1.) - 1;
				double zout = vbb[i] + (vbb[i+1]-vbb[i])/(sb[i+1]-sb[i])*(z1-sb[i]);
				rho = exp(zout);
				
			} else if (z1 >= 999.99999) {
				rho = 3.5610e-15;
				
			} else {
				int i = (int)((z1-500.)/5. + 1.) - 1;
				double zout = vc[i] + (vc[i+1]-vc[i])/(sc[i+1]-sc[i])*(z1-sc[i]);
				rho = exp(zout);
			}
			
			// Call subroutine iuni to interpolate to find molecular weight above 86000m.
			int iorder = 2;
			double y0 = iuni(qg, tt, iorder, z);
			p=(rho*rgas*t)/y0;
		}
		
		//	Convert units.
		double pin = p*conv2*conv4;
		rho = rho*conv3;
		
		if (zft <= 282000)
			cs = cs/conv1;
		else
			cs  = 894.50046;
		
		//	Calculate the outputs.
		theta = t*1.8/temprMod;
		delta = pin/presrMod;
		sigma = rho/densrMod;
		cs = cs/csrMod;
	}
	
	/**
	 * Subroutine iuni uses first or second order Lagrangian interpolation to estimate the values
	 * of a set of functions at a point x0.  iuni uses one independent variable table and a dependent
	 * variable table for each function to be evaluated.  The routine accepts the independent variables spaced
	 * at equal or unequal intervals.  Each dependent variable table must contain function values corresponding
	 * to each x(i) in the independent variable table.  The estimated values are returned by the function
	 * and represent the function value evaluated at x0.
	 *
	 * Source:  Fortran CMPB routine MTLUP modified by Computer Sciences Corporation, August 1,1973.
	 * 			Simplified and ported to Java by Joseph A. Huwaldt, December 14, 2011.
	 * 
	 * @param X		A one-dimensional array, dimensioned (nmax) in the calling program, which contains the independent
	 * 				variables.  These values must be strictly monotonic.
	 * @param Y		An array in the calling program, which contains a dependent variable table corresponding to X.
	 * @param iorder	Interpolation parameter supplied by the user. =0: zero order interpolation: The first function
	 * 					value is returned.  The functional value is estimated to remain constant and equal to the 
	 * 					nearest known function value. 
	 * @param x0	The input point at which interpolation will be performed.
	 * @return 		The estimated value of the function at x0.
	 */
	private static double iuni(double[] X, double[] Y, int iorder, double x0) {
		int N = X.length;
		int nm1 = N - 1;
		
		if (Y.length != N)
			throw new IllegalArgumentException("The Y array differs in number of elements from the X array.");
		
		// Test for zero order interpolation
		if ( iorder == 0 )
			return Y[0];
		if ( N < 2)
			return Y[0];
		
		// Check for table of node points being strictly monotonic
		// the sign of delx signifies whether table is in increasing or decreasing order.
		double delx = X[1] - X[0];
		if (abs(delx) <= MathTools.EPS)	//	delx == 0
			throw new IllegalArgumentException("Element 0 of the X array is out of order.");
		
		// Check for sign consistency in the differences of subsequent pairs
		if (N != 2) {
			for (int j=1; j < nm1; ++j) {
				if ( delx*(X[j+1]-X[j]) <= 0 )
					throw new IllegalArgumentException("Element " + j + " of the X array is out of order.");
			}
		}
		
		int ipt = 0;
		int in = 1;
		if ( delx*(x0-X[ipt]) < 0)
			in = -1;
		do {
			double p = X[ipt] - x0;
			double tmp = p*(X[ipt+1]-x0);
			if (abs(tmp) <= MathTools.EPS) {		//	p*(X[ipt+1]-x0) == 0
				if ( p != 0 )	++ipt;
				return Y[ipt];
			}
			if (tmp < 0)
				break;
			
			// Test to see if it is necessary to extrapolate
			ipt += in;
			if ( ipt <= -1 || ipt >= nm1 ) {
				// Test for order of interpolation
				ipt -= in;
				break;
			}
		} while (true);
		
		double y0 = 0;
		if ( iorder <= 1 ) {
			// First order interpolation
			y0 = Y[ipt] + ((Y[ipt+1]-Y[ipt])*(x0-X[ipt]))/(X[ipt+1]-X[ipt]);
		
		} else if (N == 2) {
			throw new IllegalArgumentException("Insufficient points were supplied for second order interpolation.");
		
		} else {
			// Second order interpolation
			// Choosing a third point so as to minimize the distance between
			// the three points used to interpolate.
			int l = ipt;
			if ( ipt == nm1 || delx*(x0-X[ipt-1]) < delx*(X[ipt+2]-x0) )
				l = ipt - 1;
			double v1 = X[l] - x0;
			double v2 = X[l+1] - x0;
			double v3 = X[l+2] - x0;
			
			double yy1 = (Y[l]*v2-Y[l+1]*v1)/(X[l+1]-X[l]);
			double yy2 = (Y[l+1]*v3-Y[l+2]*v2)/(X[l+2]-X[l+1]);
			y0 = (yy1*v3-yy2*v1)/(X[l+2]-X[l]);
		}
		
		return y0;
	}
	
	/**
	*  A simple method to test the 1976 standard atmosphere.
	*/
	public static void main(String args[]) {
	
		System.out.println("\nTesting StdAtmos1976 class:");
		
		double h = 0;
		StdAtmos atmos = new StdAtmos1976(h);
		System.out.println("    minAltitude = " + atmos.minAltitude() + ", maxAltitude = " + atmos.maxAltitude() +
								" m.");
		System.out.println("    h = " + h + " m, delta = " + atmos.getPressureRatio() + ", sigma = " +
				atmos.getDensityRatio() + ", theta = " + atmos.getTemperatureRatio() + 
				", cs = " + atmos.getSpeedOfSoundRatio() + ".");
		h = 20000;
		atmos = new StdAtmos1976(h);
		System.out.println("    h = " + h + " m, delta = " + atmos.getPressureRatio() + ", sigma = " +
									atmos.getDensityRatio() + ", theta = " + atmos.getTemperatureRatio() + 
									", cs = " + atmos.getSpeedOfSoundRatio() + ".");
		System.out.println("    h = " + h + " m, P = " + atmos.getPressure() + " N/m^2, density = " +
									atmos.getDensity() + " g/cm^3, T = " + atmos.getTemperature() + " K.");
		System.out.println("    h = " + h + " m, speed of sound = " + atmos.getSpeedOfSound() + " m/s.");
		
		h = 11000*0.3048;
		atmos.setAltitude(h);
		System.out.println("    h = " + h + " m, delta = " + atmos.getPressureRatio() + ", sigma = " +
				atmos.getDensityRatio() + ", theta = " + atmos.getTemperatureRatio() + 
				", cs = " + atmos.getSpeedOfSoundRatio() + ".");
		System.out.println("    h = " + h + " m, P = " + atmos.getPressure() + " N/m^2, density = " +
				atmos.getDensity() + " g/cm^3, T = " + atmos.getTemperature() + " K.");
		System.out.println("    h = " + h + " m, speed of sound = " + atmos.getSpeedOfSound() + " m/s.");
		
		h = 75000*0.3048;
		atmos.setAltitude(h);
		System.out.println("    h = " + h + " m, delta = " + atmos.getPressureRatio() + ", sigma = " +
				atmos.getDensityRatio() + ", theta = " + atmos.getTemperatureRatio() + 
				", cs = " + atmos.getSpeedOfSoundRatio() + ".");
		System.out.println("    h = " + h + " m, P = " + atmos.getPressure() + " N/m^2, density = " +
				atmos.getDensity() + " g/cm^3, T = " + atmos.getTemperature() + " K.");
		System.out.println("    h = " + h + " m, speed of sound = " + atmos.getSpeedOfSound() + " m/s.");
		
		h = 300000*0.3048;
		atmos.setAltitude(h);
		System.out.println("    h = " + h + " m, delta = " + atmos.getPressureRatio() + ", sigma = " +
				atmos.getDensityRatio() + ", theta = " + atmos.getTemperatureRatio() + 
				", cs = " + atmos.getSpeedOfSoundRatio() + ".");
		System.out.println("    h = " + h + " m, P = " + atmos.getPressure() + " N/m^2, density = " +
				atmos.getDensity() + " g/cm^3, T = " + atmos.getTemperature() + " K.");
		System.out.println("    h = " + h + " m, speed of sound = " + atmos.getSpeedOfSound() + " m/s.");
		
		h = 4000000*0.3048;
		atmos.setAltitude(h);
		System.out.println("    h = " + h + " m, delta = " + atmos.getPressureRatio() + ", sigma = " +
				atmos.getDensityRatio() + ", theta = " + atmos.getTemperatureRatio() + 
				", cs = " + atmos.getSpeedOfSoundRatio() + ".");
		System.out.println("    h = " + h + " m, P = " + atmos.getPressure() + " N/m^2, density = " +
				atmos.getDensity() + " g/cm^3, T = " + atmos.getTemperature() + " K.");
		System.out.println("    h = " + h + " m, speed of sound = " + atmos.getSpeedOfSound() + " m/s.");
		
		System.out.println("Done!");
	}

}


